--- a/components/arduino_tinyusb/src/dcd_dwc2.c	2024-10-02 12:17:40.000000000 +0300
+++ b/components/arduino_tinyusb/src/dcd_dwc2.c	2024-10-02 12:19:48.000000000 +0300
@@ -316,6 +316,16 @@
 //--------------------------------------------------------------------
 // Endpoint
 //--------------------------------------------------------------------
+#if defined(TUP_USBIP_DWC2_ESP32)
+// Keep count of how many FIFOs are in use
+static uint8_t _allocated_fifos = 1; //FIFO0 is always in use
+
+// Will either return an unused FIFO number, or 0 if all are used.
+static uint8_t get_free_fifo(void) {
+  if (_allocated_fifos < 5) return _allocated_fifos++;
+  return 0;
+}
+#endif
 
 static void edpt_activate(uint8_t rhport, tusb_desc_endpoint_t const * p_endpoint_desc) {
   dwc2_regs_t* dwc2 = DWC2_REG(rhport);
@@ -336,7 +346,18 @@
     dwc2->epout[epnum].doepctl = dxepctl;
     dwc2->daintmsk |= TU_BIT(DAINTMSK_OEPM_Pos + epnum);
   } else {
-    dwc2->epin[epnum].diepctl = dxepctl | (epnum << DIEPCTL_TXFNUM_Pos);
+    uint8_t fifo_num = epnum;
+#if defined(TUP_USBIP_DWC2_ESP32)
+    // Special Case for EP5, which is used by CDC but not actually called by the driver
+    // we can give it a fake FIFO
+    if (epnum == 5) {
+      fifo_num = epnum;
+    } else {
+      fifo_num = get_free_fifo();
+    }
+    //TU_ASSERT(fifo_num != 0);
+#endif
+    dwc2->epin[epnum].diepctl = dxepctl | (fifo_num << DIEPCTL_TXFNUM_Pos);
     dwc2->daintmsk |= TU_BIT(DAINTMSK_IEPM_Pos + epnum);
   }
 }
@@ -850,6 +871,10 @@
     xfer_status[n][TUSB_DIR_IN].max_size = 0;
   }
 
+#if defined(TUP_USBIP_DWC2_ESP32)
+  _allocated_fifos = 1;
+#endif
+
   dfifo_flush_tx(dwc2, 0x10); // all tx fifo
   dfifo_flush_rx(dwc2);
 
@@ -1204,6 +1229,9 @@
   if (int_status & GINTSTS_USBRST) {
     // USBRST is start of reset.
     dwc2->gintsts = GINTSTS_USBRST;
+#if defined(TUP_USBIP_DWC2_ESP32)
+    _allocated_fifos = 1;
+#endif
     bus_reset(rhport);
   }
 
@@ -1235,7 +1263,11 @@
 
   if (int_status & GINTSTS_USBSUSP) {
     dwc2->gintsts = GINTSTS_USBSUSP;
-    dcd_event_bus_signal(rhport, DCD_EVENT_SUSPEND, true);
+    //dcd_event_bus_signal(rhport, DCD_EVENT_SUSPEND, true);
+    dcd_event_bus_signal(rhport, DCD_EVENT_UNPLUGGED, true);
+#if defined(TUP_USBIP_DWC2_ESP32)
+    _allocated_fifos = 1;
+#endif
   }
 
   if (int_status & GINTSTS_WKUINT) {
@@ -1252,6 +1284,9 @@
 
     if (otg_int & GOTGINT_SEDET) {
       dcd_event_bus_signal(rhport, DCD_EVENT_UNPLUGGED, true);
+#if defined(TUP_USBIP_DWC2_ESP32)
+      _allocated_fifos = 1;
+#endif
     }
 
     dwc2->gotgint = otg_int;
